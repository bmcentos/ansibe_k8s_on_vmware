- name: Criando servidores Kubernetes
  hosts: "cluster"
  gather_facts: false
  become: yes
  vars:
    vg: vg_storage
    lv: lv_storage
    m_point: /var/lib/longhorn
    containerd_vg: vg_containerd
    containerd_lv: lv_containerd
    containerd_m_point: /var/lib/containerd

  vars_files:
    - ../vars/vars_file.yaml
  tasks:
  - name: Criando servidores virtuais
    community.vmware.vmware_guest:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      validate_certs: no
      folder: "{{ folder }}"
      template: "{{ vmtemplate }}"
      name: "{{ item.vm_name | upper }}"
      cluster: "{{ vmcluster }}"
      datacenter: "{{ datacenter }}"
      datastore: "{{ item.datastore }}"
      hardware:
        memory_mb: "{{ vram }}"
        num_cpus: "{{ vcpus }}"
        num_cpu_cores_per_socket: 1
        scsi: paravirtual
        hotadd_cpu: True
        hotremove_cpu: True
        hotadd_memory: True
      networks:
      - name: "{{ net_name }}"
        ip: "{{ item.vm_ip }}"
        netmask: 255.255.255.0
        gateway: "{{ vm_gw }}"
        type: static
        dns_servers: 172.16.32.7
        start_connected: yes
      wait_for_ip_address: yes
      customization:
        hostname: "{{ item.vm_name | lower }}"
        domain: "{{ domain }}"
        dns_servers:
        - 8.8.8.8
      state: poweredon
    delegate_to: localhost
    loop:
      -  { datastore: '{{ datastore }}', vm_name: '{{ inventory_hostname }}',  server: '{{ inventory_hostname }}', vm_ip: '{{ ansible_host }}' }

  - name: Atachando disco para o LongHorn
    vmware_guest_disk:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      validate_certs: no
      datacenter: "{{ datacenter }}"
      name: "{{ item.vm_name | upper }}"
      disk:
      - size_gb: "{{ longhorn_gb_disk }}"
        datastore: "{{ item.datastore }}"
        type: thin
        state: present
        scsi_controller: 2
        unit_number: 1
        scsi_type: 'paravirtual'
        disk_mode: 'persistent'
    delegate_to: localhost
    loop:
      -  { datastore: '{{ datastore }}', vm_name: '{{ inventory_hostname }}' }
    when: "'master' not in group_names"

#############Criando disco para o containerd
  - name: Atachando disco para o ContainerD
    vmware_guest_disk:
      hostname: "{{ vcenter_hostname }}"
      username: "{{ username }}"
      password: "{{ password }}"
      validate_certs: no
      datacenter: "{{ datacenter }}"
      name: "{{ item.vm_name | upper }}"
      disk:
      - size_gb: "{{ containerd_gb_disk }}"
        datastore: "{{ item.datastore }}"
        type: thin
        state: present
        scsi_controller: 2
        unit_number: 2
        scsi_type: 'paravirtual'
        disk_mode: 'persistent'
    delegate_to: localhost
    loop:
      -  { datastore: '{{ datastore }}', vm_name: '{{ inventory_hostname }}' }


  - name: Testando conectividade das VMs
    shell: ping -c4 "{{ item.vm_name }}"
    register: ping
    loop:
      -  {  vm_name: '{{ ansible_host }}' }
    delegate_to: localhost

  - name: Aguardando o ssh ficar disponivel - {{ inventory_hostname }}
    local_action: wait_for host={{ ansible_host }} port=22
      state=started delay=5 timeout=600
    retries: 10
    delay: 10

  - name: Registra servidor no satellite - {{ inventory_hostname }}
    shell: "{{ item }}"
    loop:
      - curl -sS {{ satellite_rhsm }} | tee /etc/rhsm/rhsm.conf
      - subscription-manager register --org="{{ satellite_org }}" --activationkey="{{ satellite_key }}" --force
      - subscription-manager repos --enable '*'
      - subscription-manager release --set {{ satellite_release | default('8') }}
      - subscription-manager subscribe --auto
      - subscription-manager attach --auto
    async: 1000
    when:  satellite_enabled| lower  == "yes" or satellite_enabled| lower  == "true"

######################Criando volume para o LongHorn
  - name: Criando Volume Group {{ vg }}
    lvg:
      vg: "{{ vg }}"
      pvs: /dev/sdb
    when: "'master' not in group_names"


  - name: Cria o LV vg_storage para o longhort
    lvol:
      vg: "{{ vg }}"
      lv: "{{ lv }}"
      size: 100%FREE
      pvs: /dev/sdb
    when: "'master' not in group_names"

  - name: Formatando o volume {{ vg}}-{{ lv }}
    filesystem:
      fstype: xfs
      dev: /dev/{{ vg }}/{{ lv }}
    when: "'master' not in group_names"

  - name: Criando diretorio longhorn
    file:
      path: "{{ m_point }}"
      state: directory
    when: "'master' not in group_names"

  - name: Montando o volume em {{ m_point }}
    mount:
      src: /dev/{{ vg }}/{{ lv }}
      path: "{{ m_point }}"
      fstype: xfs
      state: mounted
    when: "'master' not in group_names"

################Criando o volume para o containerD
  - name: Criando Volume Group {{ containerd_vg }} - Workers Node
    lvg:
      vg: "{{ containerd_vg }}"
      pvs: /dev/sdc
    when: "'master' not in group_names"


  - name: Cria o LV vg_storage para o ContainerD - Workers Node
    lvol:
      vg: "{{ containerd_vg }}"
      lv: "{{ containerd_lv }}"
      size: 100%FREE
      pvs: /dev/sdc
    when: "'master' not in group_names"

##############Criando volume para Master Node
  - name: Criando Volume Group {{ containerd_vg }} - Workers Node
    lvg:
      vg: "{{ containerd_vg }}"
      pvs: /dev/sdb
    when: "'workers' not in group_names"


  - name: Cria o LV vg_storage para o ContainerD - Master Node
    lvol:
      vg: "{{ containerd_vg }}"
      lv: "{{ containerd_lv }}"
      size: 100%FREE
      pvs: /dev/sdb
    when: "'workers' not in group_names"


  - name: Formatando o volume {{ containerd_vg}}-{{ containerd_lv }}
    filesystem:
      fstype: xfs
      dev: /dev/{{ containerd_vg }}/{{ containerd_lv }}
      opts: -n ftype=1

  - name: Criando diretorio ContainerD
    file:
      path: "{{ containerd_m_point }}"
      state: directory

  - name: Montando o volume em {{ containerd_m_point }}
    mount:
      src: /dev/{{ containerd_vg }}/{{ containerd_lv }}
      path: "{{ containerd_m_point }}"
      fstype: xfs
      state: mounted

